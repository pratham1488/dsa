#include <iostream>
#include <vector>
#include <climits>
using namespace std;

const int INF = INT_MAX;
int n = 8;
vector<vector<int>> cost = {
    {INF, 1, 2, INF, INF, INF, INF, INF},
    {INF, INF, INF, 2, 3, INF, INF, INF},
    {INF, INF, INF, INF, INF, 2, INF, INF},
    {INF, INF, INF, INF, INF, INF, 1, INF},
    {INF, INF, INF, INF, INF, INF, 2, INF},
    {INF, INF, INF, INF, INF, INF, INF, 3},
    {INF, INF, INF, INF, INF, INF, INF, 1},
    {INF, INF, INF, INF, INF, INF, INF, INF}
};

void forward() {
    vector<int> dist(n, INF), path(n);
    dist[n-1] = 0;
    for (int i = n-2; i >= 0; i--) {
        for (int j = i+1; j < n; j++) {
            if (cost[i][j] != INF && cost[i][j] + dist[j] < dist[i]) {
                dist[i] = cost[i][j] + dist[j];
                path[i] = j;
            }
        }
    }
    cout << "Forward Path: ";
    int i = 0;
    while (i != n-1) {
        cout << i << " -> ";
        i = path[i];
    }
    cout << n-1 << "\nMinimum Cost (Forward): " << dist[0] << endl;
}

void backward() {
    vector<int> dist(n, INF), path(n);
    dist[0] = 0;
    for (int j = 1; j < n; j++) {
        for (int i = 0; i < j; i++) {
            if (cost[i][j] != INF && dist[i] + cost[i][j] < dist[j]) {
                dist[j] = dist[i] + cost[i][j];
                path[j] = i;
            }
        }
    }
    cout << "Backward Path: ";
    vector<int> revPath;
    int j = n-1;
    while (j != 0) {
        revPath.push_back(j);
        j = path[j];
    }
    revPath.push_back(0);
    for (int i = revPath.size()-1; i > 0; i--)
        cout << revPath[i] << " -> ";
    cout << revPath[0] << "\nMinimum Cost (Backward): " << dist[n-1] << endl;
}

int main() {
forward();
    backward();
    return 0;
}
    forward();
    backward();
    return 0;
}
